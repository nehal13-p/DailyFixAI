{"version":3,"file":"room-state.js","names":["RoomMember","logger","isNumber","removeHiddenChars","EventType","UNSTABLE_MSC2716_MARKER","MatrixEventEvent","GuestAccess","HistoryVisibility","JoinRule","TypedEventEmitter","Beacon","BeaconEvent","getBeaconInfoIdentifier","TypedReEmitter","M_BEACON","M_BEACON_INFO","KnownMembership","OobStatus","RoomStateEvent","RoomState","constructor","roomId","oobMemberFlags","arguments","length","undefined","status","NotStarted","isStartTimelineState","_defineProperty","Map","updateModifiedTime","getJoinedMemberCount","summaryJoinedMemberCount","joinedMemberCount","getMembers","reduce","count","m","membership","Join","setJoinedMemberCount","getInvitedMemberCount","summaryInvitedMemberCount","invitedMemberCount","Invite","setInvitedMemberCount","Object","values","members","getMembersExcept","excludedIds","filter","includes","userId","getMember","getSentinelMember","sentinel","sentinels","member","events","setMembershipEvent","getStateEvents","eventType","stateKey","has","Array","from","get","event","hasLiveBeacons","_this$liveBeaconIds","liveBeaconIds","_liveBeaconIds","clone","copy","forEach","eventsByStateKey","setStateEvents","Finished","isOutOfBand","_copy$getMember","markOutOfBand","setUnknownStateEvents","unknownStateEvents","getType","getStateKey","stateEvents","options","_lastStateEvent$event","_event$event$unsigned","getRoomId","isState","matches","setBeacon","lastStateEvent","getStateEventMatching","lastReplaceId","unsigned","replaces_state","lastId","event_id","newReplaceId","newId","setStateEvent","_event$getContent$dis","updateDisplayNameCache","getContent","displayname","updateThirdPartyTokenCache","emit","Events","onBeaconLivenessChange","Leave","Ban","avatar_url","getPrevContent","getOrCreateMember","updateMember","Members","RoomPowerLevels","oldLastModified","getLastModifiedTime","setPowerLevelEvent","Marker","Update","processBeaconEvents","matrixClient","_this","_asyncToGenerator","beacons","size","beaconByEventIdDict","dict","beacon","beaconInfoId","processBeaconRelation","beaconInfoEventId","addLocations","_loop","_event$getRelation","relatedToEventId","getRelation","v","isEncrypted","decryptEventIfNeeded","_unused","isDecryptionFailure","once","Decrypted","_ret","NewMember","set","beaconIdentifier","isRedacted","_event$getRedactionEv","getRedactionEvent","redacts","destroy","delete","update","reEmitter","reEmit","New","Destroy","LivenessChange","on","bind","identifier","isLive","map","BeaconLiveness","_this$events$get$get","_this$events$get","pwrLvlEvent","needsOutOfBandMembers","outOfBandMembersReady","markOutOfBandMembersStarted","InProgress","markOutOfBandMembersFailed","clearOutOfBandMembers","keys","log","concat","setOutOfBandMembers","e","setOutOfBandMember","stateEvent","existingMember","name","setTypingEvent","getInviteForThreePidToken","token","tokenToInvite","modified","Date","now","getUserIdsWithDisplayName","displayName","_this$displayNameToUs","displayNameToUserIds","maySendRedactionForEvent","mxEvent","canRedact","maySendEvent","RoomRedaction","getSender","hasSufficientPowerLevelFor","powerLevel","action","powerLevelsEvent","powerLevels","requiredLevel","maySendMessage","maySendEventOfType","RoomMessage","mayClientSendStateEvent","stateEventType","cli","isGuest","credentials","maySendStateEvent","state","eventsLevels","stateDefault","eventsDefault","Number","isSafeInteger","state_default","userPowerLevel","users","users_default","events_default","mayTriggerNotifOfType","notifLevelKey","notifLevel","notifications","getJoinRule","_joinRuleEvent$getCon","joinRuleEvent","RoomJoinRules","joinRuleContent","getHistoryVisibility","_historyVisibilityEve","historyVisibilityEvent","RoomHistoryVisibility","historyVisibilityContent","Shared","getGuestAccess","_guestAccessEvent$get","guestAccessEvent","RoomGuestAccess","guestAccessContent","Forbidden","findPredecessor","msc3946ProcessDynamicPredecessor","predecessorEvent","RoomPredecessor","content","predecessor_room_id","eventId","last_known_event_id","viaServers","via_servers","isArray","createEvent","RoomCreate","predecessor","memberEvent","third_party_invite","signed","threePidInvite","RoomThirdPartyInvite","oldName","userIdsToDisplayNames","strippedOldName","existingUserIds","filteredUserIDs","id","strippedDisplayname","_this$displayNameToUs2","arr","push"],"sources":["../../src/models/room-state.ts"],"sourcesContent":["/*\nCopyright 2015 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { RoomMember } from \"./room-member.ts\";\nimport { logger } from \"../logger.ts\";\nimport { isNumber, removeHiddenChars } from \"../utils.ts\";\nimport { EventType, UNSTABLE_MSC2716_MARKER } from \"../@types/event.ts\";\nimport { IEvent, MatrixEvent, MatrixEventEvent } from \"./event.ts\";\nimport { MatrixClient } from \"../client.ts\";\nimport { GuestAccess, HistoryVisibility, JoinRule } from \"../@types/partials.ts\";\nimport { TypedEventEmitter } from \"./typed-event-emitter.ts\";\nimport { Beacon, BeaconEvent, BeaconEventHandlerMap, getBeaconInfoIdentifier, BeaconIdentifier } from \"./beacon.ts\";\nimport { TypedReEmitter } from \"../ReEmitter.ts\";\nimport { M_BEACON, M_BEACON_INFO } from \"../@types/beacon.ts\";\nimport { KnownMembership } from \"../@types/membership.ts\";\nimport { RoomJoinRulesEventContent } from \"../@types/state_events.ts\";\n\nexport interface IMarkerFoundOptions {\n    /** Whether the timeline was empty before the marker event arrived in the\n     *  room. This could be happen in a variety of cases:\n     *  1. From the initial sync\n     *  2. It's the first state we're seeing after joining the room\n     *  3. Or whether it's coming from `syncFromCache`\n     *\n     * A marker event refers to `UNSTABLE_MSC2716_MARKER` and indicates that\n     * history was imported somewhere back in time. It specifically points to an\n     * MSC2716 insertion event where the history was imported at. Marker events\n     * are sent as state events so they are easily discoverable by clients and\n     * homeservers and don't get lost in timeline gaps.\n     */\n    timelineWasEmpty?: boolean;\n}\n\n// possible statuses for out-of-band member loading\nenum OobStatus {\n    NotStarted,\n    InProgress,\n    Finished,\n}\n\nexport interface IPowerLevelsContent {\n    users?: Record<string, number>;\n    events?: Record<string, number>;\n    notifications?: Partial<Record<\"room\", number>>;\n    // eslint-disable-next-line camelcase\n    users_default?: number;\n    // eslint-disable-next-line camelcase\n    events_default?: number;\n    // eslint-disable-next-line camelcase\n    state_default?: number;\n    ban?: number;\n    invite?: number;\n    kick?: number;\n    redact?: number;\n}\n\nexport enum RoomStateEvent {\n    Events = \"RoomState.events\",\n    Members = \"RoomState.members\",\n    NewMember = \"RoomState.newMember\",\n    Update = \"RoomState.update\", // signals batches of updates without specificity\n    BeaconLiveness = \"RoomState.BeaconLiveness\",\n    Marker = \"RoomState.Marker\",\n}\n\nexport type RoomStateEventHandlerMap = {\n    /**\n     * Fires whenever the event dictionary in room state is updated.\n     * This does not guarantee that any related objects (like RoomMember) have been updated.\n     * Use RoomStateEvent.Update for that.\n     * @param event - The matrix event which caused this event to fire.\n     * @param state - The room state whose RoomState.events dictionary\n     * was updated.\n     * @param prevEvent - The event being replaced by the new state, if\n     * known. Note that this can differ from `getPrevContent()` on the new state event\n     * as this is the store's view of the last state, not the previous state provided\n     * by the server.\n     * @example\n     * ```\n     * matrixClient.on(\"RoomState.events\", function(event, state, prevEvent){\n     *   var newStateEvent = event;\n     * });\n     * ```\n     */\n    [RoomStateEvent.Events]: (event: MatrixEvent, state: RoomState, prevEvent: MatrixEvent | null) => void;\n    /**\n     * Fires whenever a member in the members dictionary is updated in any way.\n     * @param event - The matrix event which caused this event to fire.\n     * @param state - The room state whose RoomState.members dictionary\n     * was updated.\n     * @param member - The room member that was updated.\n     * @example\n     * ```\n     * matrixClient.on(\"RoomState.members\", function(event, state, member){\n     *   var newMembershipState = member.membership;\n     * });\n     * ```\n     */\n    [RoomStateEvent.Members]: (event: MatrixEvent, state: RoomState, member: RoomMember) => void;\n    /**\n     * Fires whenever a member is added to the members dictionary. The RoomMember\n     * will not be fully populated yet (e.g. no membership state) but will already\n     * be available in the members dictionary.\n     * @param event - The matrix event which caused this event to fire.\n     * @param state - The room state whose RoomState.members dictionary\n     * was updated with a new entry.\n     * @param member - The room member that was added.\n     * @example\n     * ```\n     * matrixClient.on(\"RoomState.newMember\", function(event, state, member){\n     *   // add event listeners on 'member'\n     * });\n     * ```\n     */\n    [RoomStateEvent.NewMember]: (event: MatrixEvent, state: RoomState, member: RoomMember) => void;\n    [RoomStateEvent.Update]: (state: RoomState) => void;\n    [RoomStateEvent.BeaconLiveness]: (state: RoomState, hasLiveBeacons: boolean) => void;\n    [RoomStateEvent.Marker]: (event: MatrixEvent, setStateOptions?: IMarkerFoundOptions) => void;\n    [BeaconEvent.New]: (event: MatrixEvent, beacon: Beacon) => void;\n};\n\ntype EmittedEvents = RoomStateEvent | BeaconEvent;\ntype EventHandlerMap = RoomStateEventHandlerMap & BeaconEventHandlerMap;\n\ntype KeysMatching<T, V> = { [K in keyof T]-?: T[K] extends V ? K : never }[keyof T];\n\nexport class RoomState extends TypedEventEmitter<EmittedEvents, EventHandlerMap> {\n    public readonly reEmitter = new TypedReEmitter<EmittedEvents, EventHandlerMap>(this);\n    private sentinels: Record<string, RoomMember> = {}; // userId: RoomMember\n    // stores fuzzy matches to a list of userIDs (applies utils.removeHiddenChars to keys)\n    private displayNameToUserIds = new Map<string, string[]>();\n    private userIdsToDisplayNames: Record<string, string> = {};\n    private tokenToInvite: Record<string, MatrixEvent> = {}; // 3pid invite state_key to m.room.member invite\n    private joinedMemberCount: number | null = null; // cache of the number of joined members\n    // joined members count from summary api\n    // once set, we know the server supports the summary api\n    // and we should only trust that\n    // we could also only trust that before OOB members\n    // are loaded but doesn't seem worth the hassle atm\n    private summaryJoinedMemberCount: number | null = null;\n    // same for invited member count\n    private invitedMemberCount: number | null = null;\n    private summaryInvitedMemberCount: number | null = null;\n    private modified = -1;\n\n    // XXX: Should be read-only\n    // The room member dictionary, keyed on the user's ID.\n    public members: Record<string, RoomMember> = {}; // userId: RoomMember\n    // The state events dictionary, keyed on the event type and then the state_key value.\n    public events = new Map<string, Map<string, MatrixEvent>>(); // Map<eventType, Map<stateKey, MatrixEvent>>\n    // The pagination token for this state.\n    public paginationToken: string | null = null;\n\n    public readonly beacons = new Map<BeaconIdentifier, Beacon>();\n    private _liveBeaconIds: BeaconIdentifier[] = [];\n\n    /**\n     * Construct room state.\n     *\n     * Room State represents the state of the room at a given point.\n     * It can be mutated by adding state events to it.\n     * There are two types of room member associated with a state event:\n     * normal member objects (accessed via getMember/getMembers) which mutate\n     * with the state to represent the current state of that room/user, e.g.\n     * the object returned by `getMember('@bob:example.com')` will mutate to\n     * get a different display name if Bob later changes his display name\n     * in the room.\n     * There are also 'sentinel' members (accessed via getSentinelMember).\n     * These also represent the state of room members at the point in time\n     * represented by the RoomState object, but unlike objects from getMember,\n     * sentinel objects will always represent the room state as at the time\n     * getSentinelMember was called, so if Bob subsequently changes his display\n     * name, a room member object previously acquired with getSentinelMember\n     * will still have his old display name. Calling getSentinelMember again\n     * after the display name change will return a new RoomMember object\n     * with Bob's new display name.\n     *\n     * @param roomId - Optional. The ID of the room which has this state.\n     * If none is specified it just tracks paginationTokens, useful for notifTimelineSet\n     * @param oobMemberFlags - Optional. The state of loading out of bound members.\n     * As the timeline might get reset while they are loading, this state needs to be inherited\n     * and shared when the room state is cloned for the new timeline.\n     * This should only be passed from clone.\n     * @param isStartTimelineState - Optional. This state is marked as a start state.\n     * This is used to skip state insertions that are\n     * in the wrong order. The order is determined by the `replaces_state` id.\n     *\n     * Example:\n     * A current state events `replaces_state` value is `1`.\n     * Trying to insert a state event with `event_id` `1` in its place would fail if isStartTimelineState = false.\n     *\n     * A current state events `event_id` is `2`.\n     * Trying to insert a state event where its `replaces_state` value is `2` would fail if isStartTimelineState = true.\n     */\n\n    public constructor(\n        public readonly roomId: string,\n        private oobMemberFlags = { status: OobStatus.NotStarted },\n        public readonly isStartTimelineState = false,\n    ) {\n        super();\n        this.updateModifiedTime();\n    }\n\n    /**\n     * Returns the number of joined members in this room\n     * This method caches the result.\n     * @returns The number of members in this room whose membership is 'join'\n     */\n    public getJoinedMemberCount(): number {\n        if (this.summaryJoinedMemberCount !== null) {\n            return this.summaryJoinedMemberCount;\n        }\n        if (this.joinedMemberCount === null) {\n            this.joinedMemberCount = this.getMembers().reduce((count, m) => {\n                return m.membership === KnownMembership.Join ? count + 1 : count;\n            }, 0);\n        }\n        return this.joinedMemberCount;\n    }\n\n    /**\n     * Set the joined member count explicitly (like from summary part of the sync response)\n     * @param count - the amount of joined members\n     */\n    public setJoinedMemberCount(count: number): void {\n        this.summaryJoinedMemberCount = count;\n    }\n\n    /**\n     * Returns the number of invited members in this room\n     * @returns The number of members in this room whose membership is 'invite'\n     */\n    public getInvitedMemberCount(): number {\n        if (this.summaryInvitedMemberCount !== null) {\n            return this.summaryInvitedMemberCount;\n        }\n        if (this.invitedMemberCount === null) {\n            this.invitedMemberCount = this.getMembers().reduce((count, m) => {\n                return m.membership === KnownMembership.Invite ? count + 1 : count;\n            }, 0);\n        }\n        return this.invitedMemberCount;\n    }\n\n    /**\n     * Set the amount of invited members in this room\n     * @param count - the amount of invited members\n     */\n    public setInvitedMemberCount(count: number): void {\n        this.summaryInvitedMemberCount = count;\n    }\n\n    /**\n     * Get all RoomMembers in this room.\n     * @returns A list of RoomMembers.\n     */\n    public getMembers(): RoomMember[] {\n        return Object.values(this.members);\n    }\n\n    /**\n     * Get all RoomMembers in this room, excluding the user IDs provided.\n     * @param excludedIds - The user IDs to exclude.\n     * @returns A list of RoomMembers.\n     */\n    public getMembersExcept(excludedIds: string[]): RoomMember[] {\n        return this.getMembers().filter((m) => !excludedIds.includes(m.userId));\n    }\n\n    /**\n     * Get a room member by their user ID.\n     * @param userId - The room member's user ID.\n     * @returns The member or null if they do not exist.\n     */\n    public getMember(userId: string): RoomMember | null {\n        return this.members[userId] || null;\n    }\n\n    /**\n     * Get a room member whose properties will not change with this room state. You\n     * typically want this if you want to attach a RoomMember to a MatrixEvent which\n     * may no longer be represented correctly by Room.currentState or Room.oldState.\n     * The term 'sentinel' refers to the fact that this RoomMember is an unchanging\n     * guardian for state at this particular point in time.\n     * @param userId - The room member's user ID.\n     * @returns The member or null if they do not exist.\n     */\n    public getSentinelMember(userId: string): RoomMember | null {\n        if (!userId) return null;\n        let sentinel = this.sentinels[userId];\n\n        if (sentinel === undefined) {\n            sentinel = new RoomMember(this.roomId, userId);\n            const member = this.members[userId];\n            if (member?.events.member) {\n                sentinel.setMembershipEvent(member.events.member, this);\n            }\n            this.sentinels[userId] = sentinel;\n        }\n        return sentinel;\n    }\n\n    /**\n     * Get state events from the state of the room.\n     * @param eventType - The event type of the state event.\n     * @returns A list of events\n     */\n    public getStateEvents(eventType: EventType | string): MatrixEvent[];\n    /**\n     * Get state events from the state of the room.\n     * @param eventType - The event type of the state event.\n     * @param stateKey - The state_key of the state event.\n     * @returns A single event (or null if no match found).\n     */\n    public getStateEvents(eventType: EventType | string, stateKey: string): MatrixEvent | null;\n    public getStateEvents(eventType: EventType | string, stateKey?: string): MatrixEvent[] | MatrixEvent | null {\n        if (!this.events.has(eventType)) {\n            // no match\n            return stateKey === undefined ? [] : null;\n        }\n        if (stateKey === undefined) {\n            // return all values\n            return Array.from(this.events.get(eventType)!.values());\n        }\n        const event = this.events.get(eventType)!.get(stateKey);\n        return event ? event : null;\n    }\n\n    public get hasLiveBeacons(): boolean {\n        return !!this.liveBeaconIds?.length;\n    }\n\n    public get liveBeaconIds(): BeaconIdentifier[] {\n        return this._liveBeaconIds;\n    }\n\n    /**\n     * Creates a copy of this room state so that mutations to either won't affect the other.\n     * @returns the copy of the room state\n     */\n    public clone(): RoomState {\n        const copy = new RoomState(this.roomId, this.oobMemberFlags);\n\n        // Ugly hack: because setStateEvents will mark\n        // members as susperseding future out of bound members\n        // if loading is in progress (through oobMemberFlags)\n        // since these are not new members, we're merely copying them\n        // set the status to not started\n        // after copying, we set back the status\n        const status = this.oobMemberFlags.status;\n        this.oobMemberFlags.status = OobStatus.NotStarted;\n\n        Array.from(this.events.values()).forEach((eventsByStateKey) => {\n            copy.setStateEvents(Array.from(eventsByStateKey.values()));\n        });\n\n        // Ugly hack: see above\n        this.oobMemberFlags.status = status;\n\n        if (this.summaryInvitedMemberCount !== null) {\n            copy.setInvitedMemberCount(this.getInvitedMemberCount());\n        }\n        if (this.summaryJoinedMemberCount !== null) {\n            copy.setJoinedMemberCount(this.getJoinedMemberCount());\n        }\n\n        // copy out of band flags if needed\n        if (this.oobMemberFlags.status == OobStatus.Finished) {\n            // copy markOutOfBand flags\n            this.getMembers().forEach((member) => {\n                if (member.isOutOfBand()) {\n                    copy.getMember(member.userId)?.markOutOfBand();\n                }\n            });\n        }\n\n        return copy;\n    }\n\n    /**\n     * Add previously unknown state events.\n     * When lazy loading members while back-paginating,\n     * the relevant room state for the timeline chunk at the end\n     * of the chunk can be set with this method.\n     * @param events - state events to prepend\n     */\n    public setUnknownStateEvents(events: MatrixEvent[]): void {\n        const unknownStateEvents = events.filter((event) => {\n            return !this.events.has(event.getType()) || !this.events.get(event.getType())!.has(event.getStateKey()!);\n        });\n\n        this.setStateEvents(unknownStateEvents);\n    }\n\n    /**\n     * Add an array of one or more state MatrixEvents, overwriting any existing\n     * state with the same `{type, stateKey}` tuple. Will fire \"RoomState.events\"\n     * for every event added. May fire \"RoomState.members\" if there are\n     * `m.room.member` events. May fire \"RoomStateEvent.Marker\" if there are\n     * `UNSTABLE_MSC2716_MARKER` events.\n     * @param stateEvents - a list of state events for this room.\n     *\n     * @remarks\n     * Fires {@link RoomStateEvent.Members}\n     * Fires {@link RoomStateEvent.NewMember}\n     * Fires {@link RoomStateEvent.Events}\n     * Fires {@link RoomStateEvent.Marker}\n     */\n    public setStateEvents(stateEvents: MatrixEvent[], options?: IMarkerFoundOptions): void {\n        this.updateModifiedTime();\n\n        // update the core event dict\n        stateEvents.forEach((event) => {\n            if (event.getRoomId() !== this.roomId || !event.isState()) return;\n\n            if (M_BEACON_INFO.matches(event.getType())) {\n                this.setBeacon(event);\n            }\n\n            const lastStateEvent = this.getStateEventMatching(event);\n\n            // Safety measure to not update the room (and emit the update) with older state.\n            // The sync loop really should not send old events but it does very regularly.\n            // Logging on return in those two conditions results in a large amount of logging. (on startup and when running element)\n            const lastReplaceId = lastStateEvent?.event.unsigned?.replaces_state;\n            const lastId = lastStateEvent?.event.event_id;\n            const newReplaceId = event.event.unsigned?.replaces_state;\n            const newId = event.event.event_id;\n            if (this.isStartTimelineState) {\n                // Add an event to the start of the timeline. Its replace id should not be the same as the one of the current/last start state event.\n                if (newReplaceId && lastId && newReplaceId === lastId) return;\n            } else {\n                // Add an event to the end of the timeline. It should not be the same as the one replaced by the current/last end state event.\n                if (lastReplaceId && newId && lastReplaceId === newId) return;\n            }\n\n            this.setStateEvent(event);\n            if (event.getType() === EventType.RoomMember) {\n                this.updateDisplayNameCache(event.getStateKey()!, event.getContent().displayname ?? \"\");\n                this.updateThirdPartyTokenCache(event);\n            }\n            this.emit(RoomStateEvent.Events, event, this, lastStateEvent);\n        });\n\n        this.onBeaconLivenessChange();\n        // update higher level data structures. This needs to be done AFTER the\n        // core event dict as these structures may depend on other state events in\n        // the given array (e.g. disambiguating display names in one go to do both\n        // clashing names rather than progressively which only catches 1 of them).\n        stateEvents.forEach((event) => {\n            if (event.getRoomId() !== this.roomId || !event.isState()) return;\n\n            if (event.getType() === EventType.RoomMember) {\n                const userId = event.getStateKey()!;\n\n                // leave events apparently elide the displayname or avatar_url,\n                // so let's fake one up so that we don't leak user ids\n                // into the timeline\n                if (\n                    event.getContent().membership === KnownMembership.Leave ||\n                    event.getContent().membership === KnownMembership.Ban\n                ) {\n                    event.getContent().avatar_url = event.getContent().avatar_url || event.getPrevContent().avatar_url;\n                    event.getContent().displayname =\n                        event.getContent().displayname || event.getPrevContent().displayname;\n                }\n\n                const member = this.getOrCreateMember(userId, event);\n                member.setMembershipEvent(event, this);\n                this.updateMember(member);\n                this.emit(RoomStateEvent.Members, event, this, member);\n            } else if (event.getType() === EventType.RoomPowerLevels) {\n                // events with unknown state keys should be ignored\n                // and should not aggregate onto members power levels\n                if (event.getStateKey() !== \"\") {\n                    return;\n                }\n                const members = Object.values(this.members);\n                members.forEach((member) => {\n                    // We only propagate `RoomState.members` event if the\n                    // power levels has been changed\n                    // large room suffer from large re-rendering especially when not needed\n                    const oldLastModified = member.getLastModifiedTime();\n                    member.setPowerLevelEvent(event);\n                    if (oldLastModified !== member.getLastModifiedTime()) {\n                        this.emit(RoomStateEvent.Members, event, this, member);\n                    }\n                });\n\n                // assume all our sentinels are now out-of-date\n                this.sentinels = {};\n            } else if (UNSTABLE_MSC2716_MARKER.matches(event.getType())) {\n                this.emit(RoomStateEvent.Marker, event, options);\n            }\n        });\n\n        this.emit(RoomStateEvent.Update, this);\n    }\n\n    public async processBeaconEvents(events: MatrixEvent[], matrixClient: MatrixClient): Promise<void> {\n        if (\n            !events.length ||\n            // discard locations if we have no beacons\n            !this.beacons.size\n        ) {\n            return;\n        }\n\n        const beaconByEventIdDict = [...this.beacons.values()].reduce<Record<string, Beacon>>((dict, beacon) => {\n            dict[beacon.beaconInfoId] = beacon;\n            return dict;\n        }, {});\n\n        const processBeaconRelation = (beaconInfoEventId: string, event: MatrixEvent): void => {\n            if (!M_BEACON.matches(event.getType())) {\n                return;\n            }\n\n            const beacon = beaconByEventIdDict[beaconInfoEventId];\n\n            if (beacon) {\n                beacon.addLocations([event]);\n            }\n        };\n\n        for (const event of events) {\n            const relatedToEventId = event.getRelation()?.event_id;\n            // not related to a beacon we know about; discard\n            if (!relatedToEventId || !beaconByEventIdDict[relatedToEventId]) return;\n            if (!M_BEACON.matches(event.getType()) && !event.isEncrypted()) return;\n\n            try {\n                await matrixClient.decryptEventIfNeeded(event);\n                processBeaconRelation(relatedToEventId, event);\n            } catch {\n                if (event.isDecryptionFailure()) {\n                    // add an event listener for once the event is decrypted.\n                    event.once(MatrixEventEvent.Decrypted, async () => {\n                        processBeaconRelation(relatedToEventId, event);\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Looks up a member by the given userId, and if it doesn't exist,\n     * create it and emit the `RoomState.newMember` event.\n     * This method makes sure the member is added to the members dictionary\n     * before emitting, as this is done from setStateEvents and setOutOfBandMember.\n     * @param userId - the id of the user to look up\n     * @param event - the membership event for the (new) member. Used to emit.\n     * @returns the member, existing or newly created.\n     *\n     * @remarks\n     * Fires {@link RoomStateEvent.NewMember}\n     */\n    private getOrCreateMember(userId: string, event: MatrixEvent): RoomMember {\n        let member = this.members[userId];\n        if (!member) {\n            member = new RoomMember(this.roomId, userId);\n            // add member to members before emitting any events,\n            // as event handlers often lookup the member\n            this.members[userId] = member;\n            this.emit(RoomStateEvent.NewMember, event, this, member);\n        }\n        return member;\n    }\n\n    private setStateEvent(event: MatrixEvent): void {\n        if (!this.events.has(event.getType())) {\n            this.events.set(event.getType(), new Map());\n        }\n        this.events.get(event.getType())!.set(event.getStateKey()!, event);\n    }\n\n    /**\n     * @experimental\n     */\n    private setBeacon(event: MatrixEvent): void {\n        const beaconIdentifier = getBeaconInfoIdentifier(event);\n\n        if (this.beacons.has(beaconIdentifier)) {\n            const beacon = this.beacons.get(beaconIdentifier)!;\n\n            if (event.isRedacted()) {\n                if (beacon.beaconInfoId === (<IEvent>event.getRedactionEvent())?.redacts) {\n                    beacon.destroy();\n                    this.beacons.delete(beaconIdentifier);\n                }\n                return;\n            }\n\n            return beacon.update(event);\n        }\n\n        if (event.isRedacted()) {\n            return;\n        }\n\n        const beacon = new Beacon(event);\n\n        this.reEmitter.reEmit<BeaconEvent, BeaconEvent>(beacon, [\n            BeaconEvent.New,\n            BeaconEvent.Update,\n            BeaconEvent.Destroy,\n            BeaconEvent.LivenessChange,\n        ]);\n\n        this.emit(BeaconEvent.New, event, beacon);\n        beacon.on(BeaconEvent.LivenessChange, this.onBeaconLivenessChange.bind(this));\n        beacon.on(BeaconEvent.Destroy, this.onBeaconLivenessChange.bind(this));\n\n        this.beacons.set(beacon.identifier, beacon);\n    }\n\n    /**\n     * @experimental\n     * Check liveness of room beacons\n     * emit RoomStateEvent.BeaconLiveness event\n     */\n    private onBeaconLivenessChange(): void {\n        this._liveBeaconIds = Array.from(this.beacons.values())\n            .filter((beacon) => beacon.isLive)\n            .map((beacon) => beacon.identifier);\n\n        this.emit(RoomStateEvent.BeaconLiveness, this, this.hasLiveBeacons);\n    }\n\n    private getStateEventMatching(event: MatrixEvent): MatrixEvent | null {\n        return this.events.get(event.getType())?.get(event.getStateKey()!) ?? null;\n    }\n\n    private updateMember(member: RoomMember): void {\n        // this member may have a power level already, so set it.\n        const pwrLvlEvent = this.getStateEvents(EventType.RoomPowerLevels, \"\");\n        if (pwrLvlEvent) {\n            member.setPowerLevelEvent(pwrLvlEvent);\n        }\n\n        // blow away the sentinel which is now outdated\n        delete this.sentinels[member.userId];\n\n        this.members[member.userId] = member;\n        this.joinedMemberCount = null;\n        this.invitedMemberCount = null;\n    }\n\n    /**\n     * Get the out-of-band members loading state, whether loading is needed or not.\n     * Note that loading might be in progress and hence isn't needed.\n     * @returns whether or not the members of this room need to be loaded\n     */\n    public needsOutOfBandMembers(): boolean {\n        return this.oobMemberFlags.status === OobStatus.NotStarted;\n    }\n\n    /**\n     * Check if loading of out-of-band-members has completed\n     *\n     * @returns true if the full membership list of this room has been loaded. False if it is not started or is in\n     *    progress.\n     */\n    public outOfBandMembersReady(): boolean {\n        return this.oobMemberFlags.status === OobStatus.Finished;\n    }\n\n    /**\n     * Mark this room state as waiting for out-of-band members,\n     * ensuring it doesn't ask for them to be requested again\n     * through needsOutOfBandMembers\n     */\n    public markOutOfBandMembersStarted(): void {\n        if (this.oobMemberFlags.status !== OobStatus.NotStarted) {\n            return;\n        }\n        this.oobMemberFlags.status = OobStatus.InProgress;\n    }\n\n    /**\n     * Mark this room state as having failed to fetch out-of-band members\n     */\n    public markOutOfBandMembersFailed(): void {\n        if (this.oobMemberFlags.status !== OobStatus.InProgress) {\n            return;\n        }\n        this.oobMemberFlags.status = OobStatus.NotStarted;\n    }\n\n    /**\n     * Clears the loaded out-of-band members\n     */\n    public clearOutOfBandMembers(): void {\n        let count = 0;\n        Object.keys(this.members).forEach((userId) => {\n            const member = this.members[userId];\n            if (member.isOutOfBand()) {\n                ++count;\n                delete this.members[userId];\n            }\n        });\n        logger.log(`LL: RoomState removed ${count} members...`);\n        this.oobMemberFlags.status = OobStatus.NotStarted;\n    }\n\n    /**\n     * Sets the loaded out-of-band members.\n     * @param stateEvents - array of membership state events\n     */\n    public setOutOfBandMembers(stateEvents: MatrixEvent[]): void {\n        logger.log(`LL: RoomState about to set ${stateEvents.length} OOB members ...`);\n        if (this.oobMemberFlags.status !== OobStatus.InProgress) {\n            return;\n        }\n        logger.log(`LL: RoomState put in finished state ...`);\n        this.oobMemberFlags.status = OobStatus.Finished;\n        stateEvents.forEach((e) => this.setOutOfBandMember(e));\n        this.emit(RoomStateEvent.Update, this);\n    }\n\n    /**\n     * Sets a single out of band member, used by both setOutOfBandMembers and clone\n     * @param stateEvent - membership state event\n     */\n    private setOutOfBandMember(stateEvent: MatrixEvent): void {\n        if (stateEvent.getType() !== EventType.RoomMember) {\n            return;\n        }\n        const userId = stateEvent.getStateKey()!;\n        const existingMember = this.getMember(userId);\n        // never replace members received as part of the sync\n        if (existingMember && !existingMember.isOutOfBand()) {\n            return;\n        }\n\n        const member = this.getOrCreateMember(userId, stateEvent);\n        member.setMembershipEvent(stateEvent, this);\n        // needed to know which members need to be stored seperately\n        // as they are not part of the sync accumulator\n        // this is cleared by setMembershipEvent so when it's updated through /sync\n        member.markOutOfBand();\n\n        this.updateDisplayNameCache(member.userId, member.name);\n\n        this.setStateEvent(stateEvent);\n        this.updateMember(member);\n        this.emit(RoomStateEvent.Members, stateEvent, this, member);\n    }\n\n    /**\n     * Set the current typing event for this room.\n     * @param event - The typing event\n     */\n    public setTypingEvent(event: MatrixEvent): void {\n        Object.values(this.members).forEach(function (member) {\n            member.setTypingEvent(event);\n        });\n    }\n\n    /**\n     * Get the m.room.member event which has the given third party invite token.\n     *\n     * @param token - The token\n     * @returns The m.room.member event or null\n     */\n    public getInviteForThreePidToken(token: string): MatrixEvent | null {\n        return this.tokenToInvite[token] || null;\n    }\n\n    /**\n     * Update the last modified time to the current time.\n     */\n    private updateModifiedTime(): void {\n        this.modified = Date.now();\n    }\n\n    /**\n     * Get the timestamp when this room state was last updated. This timestamp is\n     * updated when this object has received new state events.\n     * @returns The timestamp\n     */\n    public getLastModifiedTime(): number {\n        return this.modified;\n    }\n\n    /**\n     * Get user IDs with the specified or similar display names.\n     * @param displayName - The display name to get user IDs from.\n     * @returns An array of user IDs or an empty array.\n     */\n    public getUserIdsWithDisplayName(displayName: string): string[] {\n        return this.displayNameToUserIds.get(removeHiddenChars(displayName)) ?? [];\n    }\n\n    /**\n     * Returns true if userId is in room, event is not redacted and either sender of\n     * mxEvent or has power level sufficient to redact events other than their own.\n     * @param mxEvent - The event to test permission for\n     * @param userId - The user ID of the user to test permission for\n     * @returns true if the given used ID can redact given event\n     */\n    public maySendRedactionForEvent(mxEvent: MatrixEvent, userId: string): boolean {\n        const member = this.getMember(userId);\n        if (!member || member.membership === KnownMembership.Leave) return false;\n\n        if (mxEvent.status || mxEvent.isRedacted()) return false;\n\n        // The user may have been the sender, but they can't redact their own message\n        // if redactions are blocked.\n        const canRedact = this.maySendEvent(EventType.RoomRedaction, userId);\n\n        if (!canRedact) return false;\n        if (mxEvent.getSender() === userId) return true;\n\n        return this.hasSufficientPowerLevelFor(\"redact\", member.powerLevel);\n    }\n\n    /**\n     * Returns true if the given power level is sufficient for action\n     * @param action - The type of power level to check\n     * @param powerLevel - The power level of the member\n     * @returns true if the given power level is sufficient\n     */\n    public hasSufficientPowerLevelFor(\n        action: KeysMatching<Required<IPowerLevelsContent>, number>,\n        powerLevel: number,\n    ): boolean {\n        const powerLevelsEvent = this.getStateEvents(EventType.RoomPowerLevels, \"\");\n\n        let powerLevels: IPowerLevelsContent = {};\n        if (powerLevelsEvent) {\n            powerLevels = powerLevelsEvent.getContent();\n        }\n\n        let requiredLevel = 50;\n        if (isNumber(powerLevels[action])) {\n            requiredLevel = powerLevels[action]!;\n        }\n\n        return powerLevel >= requiredLevel;\n    }\n\n    /**\n     * Short-form for maySendEvent('m.room.message', userId)\n     * @param userId - The user ID of the user to test permission for\n     * @returns true if the given user ID should be permitted to send\n     *                   message events into the given room.\n     */\n    public maySendMessage(userId: string): boolean {\n        return this.maySendEventOfType(EventType.RoomMessage, userId, false);\n    }\n\n    /**\n     * Returns true if the given user ID has permission to send a normal\n     * event of type `eventType` into this room.\n     * @param eventType - The type of event to test\n     * @param userId - The user ID of the user to test permission for\n     * @returns true if the given user ID should be permitted to send\n     *                        the given type of event into this room,\n     *                        according to the room's state.\n     */\n    public maySendEvent(eventType: EventType | string, userId: string): boolean {\n        return this.maySendEventOfType(eventType, userId, false);\n    }\n\n    /**\n     * Returns true if the given MatrixClient has permission to send a state\n     * event of type `stateEventType` into this room.\n     * @param stateEventType - The type of state events to test\n     * @param cli - The client to test permission for\n     * @returns true if the given client should be permitted to send\n     *                        the given type of state event into this room,\n     *                        according to the room's state.\n     */\n    public mayClientSendStateEvent(stateEventType: EventType | string, cli: MatrixClient): boolean {\n        if (cli.isGuest() || !cli.credentials.userId) {\n            return false;\n        }\n        return this.maySendStateEvent(stateEventType, cli.credentials.userId);\n    }\n\n    /**\n     * Returns true if the given user ID has permission to send a state\n     * event of type `stateEventType` into this room.\n     * @param stateEventType - The type of state events to test\n     * @param userId - The user ID of the user to test permission for\n     * @returns true if the given user ID should be permitted to send\n     *                        the given type of state event into this room,\n     *                        according to the room's state.\n     */\n    public maySendStateEvent(stateEventType: EventType | string, userId: string): boolean {\n        return this.maySendEventOfType(stateEventType, userId, true);\n    }\n\n    /**\n     * Returns true if the given user ID has permission to send a normal or state\n     * event of type `eventType` into this room.\n     * @param eventType - The type of event to test\n     * @param userId - The user ID of the user to test permission for\n     * @param state - If true, tests if the user may send a state\n     event of this type. Otherwise tests whether\n     they may send a regular event.\n     * @returns true if the given user ID should be permitted to send\n     *                        the given type of event into this room,\n     *                        according to the room's state.\n     */\n    private maySendEventOfType(eventType: EventType | string, userId: string, state: boolean): boolean {\n        const powerLevelsEvent = this.getStateEvents(EventType.RoomPowerLevels, \"\");\n\n        let powerLevels: IPowerLevelsContent;\n        let eventsLevels: Record<EventType | string, number> = {};\n\n        let stateDefault = 0;\n        let eventsDefault = 0;\n        let powerLevel = 0;\n        if (powerLevelsEvent) {\n            powerLevels = powerLevelsEvent.getContent();\n            eventsLevels = powerLevels.events || {};\n\n            if (Number.isSafeInteger(powerLevels.state_default)) {\n                stateDefault = powerLevels.state_default!;\n            } else {\n                stateDefault = 50;\n            }\n\n            const userPowerLevel = powerLevels.users && powerLevels.users[userId];\n            if (Number.isSafeInteger(userPowerLevel)) {\n                powerLevel = userPowerLevel!;\n            } else if (Number.isSafeInteger(powerLevels.users_default)) {\n                powerLevel = powerLevels.users_default!;\n            }\n\n            if (Number.isSafeInteger(powerLevels.events_default)) {\n                eventsDefault = powerLevels.events_default!;\n            }\n        }\n\n        let requiredLevel = state ? stateDefault : eventsDefault;\n        if (Number.isSafeInteger(eventsLevels[eventType])) {\n            requiredLevel = eventsLevels[eventType];\n        }\n        return powerLevel >= requiredLevel;\n    }\n\n    /**\n     * Returns true if the given user ID has permission to trigger notification\n     * of type `notifLevelKey`\n     * @param notifLevelKey - The level of notification to test (eg. 'room')\n     * @param userId - The user ID of the user to test permission for\n     * @returns true if the given user ID has permission to trigger a\n     *                        notification of this type.\n     */\n    public mayTriggerNotifOfType(notifLevelKey: string, userId: string): boolean {\n        const member = this.getMember(userId);\n        if (!member) {\n            return false;\n        }\n\n        const powerLevelsEvent = this.getStateEvents(EventType.RoomPowerLevels, \"\");\n\n        let notifLevel = 50;\n        if (\n            powerLevelsEvent &&\n            powerLevelsEvent.getContent() &&\n            powerLevelsEvent.getContent().notifications &&\n            isNumber(powerLevelsEvent.getContent().notifications[notifLevelKey])\n        ) {\n            notifLevel = powerLevelsEvent.getContent().notifications[notifLevelKey];\n        }\n\n        return member.powerLevel >= notifLevel;\n    }\n\n    /**\n     * Returns the join rule based on the m.room.join_rule state event, defaulting to `invite`.\n     * @returns the join_rule applied to this room\n     */\n    public getJoinRule(): JoinRule {\n        const joinRuleEvent = this.getStateEvents(EventType.RoomJoinRules, \"\");\n        const joinRuleContent: Partial<RoomJoinRulesEventContent> = joinRuleEvent?.getContent() ?? {};\n        return joinRuleContent[\"join_rule\"] || JoinRule.Invite;\n    }\n\n    /**\n     * Returns the history visibility based on the m.room.history_visibility state event, defaulting to `shared`.\n     * @returns the history_visibility applied to this room\n     */\n    public getHistoryVisibility(): HistoryVisibility {\n        const historyVisibilityEvent = this.getStateEvents(EventType.RoomHistoryVisibility, \"\");\n        const historyVisibilityContent = historyVisibilityEvent?.getContent() ?? {};\n        return historyVisibilityContent[\"history_visibility\"] || HistoryVisibility.Shared;\n    }\n\n    /**\n     * Returns the guest access based on the m.room.guest_access state event, defaulting to `shared`.\n     * @returns the guest_access applied to this room\n     */\n    public getGuestAccess(): GuestAccess {\n        const guestAccessEvent = this.getStateEvents(EventType.RoomGuestAccess, \"\");\n        const guestAccessContent = guestAccessEvent?.getContent() ?? {};\n        return guestAccessContent[\"guest_access\"] || GuestAccess.Forbidden;\n    }\n\n    /**\n     * Find the predecessor room based on this room state.\n     *\n     * @param msc3946ProcessDynamicPredecessor - if true, look for an\n     * m.room.predecessor state event and use it if found (MSC3946).\n     * @returns null if this room has no predecessor. Otherwise, returns\n     * the roomId, last eventId and viaServers of the predecessor room.\n     *\n     * If msc3946ProcessDynamicPredecessor is true, use m.predecessor events\n     * as well as m.room.create events to find predecessors.\n     *\n     * Note: if an m.predecessor event is used, eventId may be undefined\n     * since last_known_event_id is optional.\n     *\n     * Note: viaServers may be undefined, and will definitely be undefined if\n     * this predecessor comes from a RoomCreate event (rather than a\n     * RoomPredecessor, which has the optional via_servers property).\n     */\n    public findPredecessor(\n        msc3946ProcessDynamicPredecessor = false,\n    ): { roomId: string; eventId?: string; viaServers?: string[] } | null {\n        // Note: the tests for this function are against Room.findPredecessor,\n        // which just calls through to here.\n\n        if (msc3946ProcessDynamicPredecessor) {\n            const predecessorEvent = this.getStateEvents(EventType.RoomPredecessor, \"\");\n            if (predecessorEvent) {\n                const content = predecessorEvent.getContent<{\n                    predecessor_room_id: string;\n                    last_known_event_id?: string;\n                    via_servers?: string[];\n                }>();\n                const roomId = content.predecessor_room_id;\n                let eventId = content.last_known_event_id;\n                if (typeof eventId !== \"string\") {\n                    eventId = undefined;\n                }\n                let viaServers = content.via_servers;\n                if (!Array.isArray(viaServers)) {\n                    viaServers = undefined;\n                }\n                if (typeof roomId === \"string\") {\n                    return { roomId, eventId, viaServers };\n                }\n            }\n        }\n\n        const createEvent = this.getStateEvents(EventType.RoomCreate, \"\");\n        if (createEvent) {\n            const predecessor = createEvent.getContent<{\n                predecessor?: Partial<{\n                    room_id: string;\n                    event_id: string;\n                }>;\n            }>()[\"predecessor\"];\n            if (predecessor) {\n                const roomId = predecessor[\"room_id\"];\n                if (typeof roomId === \"string\") {\n                    let eventId = predecessor[\"event_id\"];\n                    if (typeof eventId !== \"string\" || eventId === \"\") {\n                        eventId = undefined;\n                    }\n                    return { roomId, eventId };\n                }\n            }\n        }\n        return null;\n    }\n\n    private updateThirdPartyTokenCache(memberEvent: MatrixEvent): void {\n        if (!memberEvent.getContent().third_party_invite) {\n            return;\n        }\n        const token = (memberEvent.getContent().third_party_invite.signed || {}).token;\n        if (!token) {\n            return;\n        }\n        const threePidInvite = this.getStateEvents(EventType.RoomThirdPartyInvite, token);\n        if (!threePidInvite) {\n            return;\n        }\n        this.tokenToInvite[token] = memberEvent;\n    }\n\n    private updateDisplayNameCache(userId: string, displayName: string): void {\n        const oldName = this.userIdsToDisplayNames[userId];\n        delete this.userIdsToDisplayNames[userId];\n        if (oldName) {\n            // Remove the old name from the cache.\n            // We clobber the user_id > name lookup but the name -> [user_id] lookup\n            // means we need to remove that user ID from that array rather than nuking\n            // the lot.\n            const strippedOldName = removeHiddenChars(oldName);\n\n            const existingUserIds = this.displayNameToUserIds.get(strippedOldName);\n            if (existingUserIds) {\n                // remove this user ID from this array\n                const filteredUserIDs = existingUserIds.filter((id) => id !== userId);\n                this.displayNameToUserIds.set(strippedOldName, filteredUserIDs);\n            }\n        }\n\n        this.userIdsToDisplayNames[userId] = displayName;\n\n        const strippedDisplayname = displayName && removeHiddenChars(displayName);\n        // an empty stripped displayname (undefined/'') will be set to MXID in room-member.js\n        if (strippedDisplayname) {\n            const arr = this.displayNameToUserIds.get(strippedDisplayname) ?? [];\n            arr.push(userId);\n            this.displayNameToUserIds.set(strippedDisplayname, arr);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}