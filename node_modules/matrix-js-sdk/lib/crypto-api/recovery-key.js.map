{"version":3,"file":"recovery-key.js","names":["bs58","OLM_RECOVERY_KEY_PREFIX","KEY_SIZE","encodeRecoveryKey","key","_base58key$match","buf","Buffer","alloc","length","set","parity","i","base58key","encode","match","join","decodeRecoveryKey","recoveryKey","result","decode","replace","b","Error","Uint8Array","from","slice"],"sources":["../../src/crypto-api/recovery-key.ts"],"sourcesContent":["/*\n * Copyright 2024 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport bs58 from \"bs58\";\n\n// picked arbitrarily but to try & avoid clashing with any bitcoin ones\n// (which are also base58 encoded, but bitcoin's involve a lot more hashing)\nconst OLM_RECOVERY_KEY_PREFIX = [0x8b, 0x01];\nconst KEY_SIZE = 32;\n\n/**\n * Encode a recovery key using the Matrix {@link https://spec.matrix.org/v1.11/appendices/#cryptographic-key-representation | Cryptographic key representation}\n * @param key\n */\nexport function encodeRecoveryKey(key: ArrayLike<number>): string | undefined {\n    const buf = Buffer.alloc(OLM_RECOVERY_KEY_PREFIX.length + key.length + 1);\n    buf.set(OLM_RECOVERY_KEY_PREFIX, 0);\n    buf.set(key, OLM_RECOVERY_KEY_PREFIX.length);\n\n    let parity = 0;\n    for (let i = 0; i < buf.length - 1; ++i) {\n        parity ^= buf[i];\n    }\n    buf[buf.length - 1] = parity;\n    const base58key = bs58.encode(buf);\n\n    return base58key.match(/.{1,4}/g)?.join(\" \");\n}\n\n/**\n * Decode a recovery key encoded with the Matrix {@link https://spec.matrix.org/v1.11/appendices/#cryptographic-key-representation | Cryptographic key representation} encoding.\n * @param recoveryKey\n */\nexport function decodeRecoveryKey(recoveryKey: string): Uint8Array {\n    const result = bs58.decode(recoveryKey.replace(/ /g, \"\"));\n\n    let parity = 0;\n    for (const b of result) {\n        parity ^= b;\n    }\n    if (parity !== 0) {\n        throw new Error(\"Incorrect parity\");\n    }\n\n    for (let i = 0; i < OLM_RECOVERY_KEY_PREFIX.length; ++i) {\n        if (result[i] !== OLM_RECOVERY_KEY_PREFIX[i]) {\n            throw new Error(\"Incorrect prefix\");\n        }\n    }\n\n    if (result.length !== OLM_RECOVERY_KEY_PREFIX.length + KEY_SIZE + 1) {\n        throw new Error(\"Incorrect length\");\n    }\n\n    return Uint8Array.from(result.slice(OLM_RECOVERY_KEY_PREFIX.length, OLM_RECOVERY_KEY_PREFIX.length + KEY_SIZE));\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,IAAI,MAAM,MAAM;;AAEvB;AACA;AACA,IAAMC,uBAAuB,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC;AAC5C,IAAMC,QAAQ,GAAG,EAAE;;AAEnB;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiBA,CAACC,GAAsB,EAAsB;EAAA,IAAAC,gBAAA;EAC1E,IAAMC,GAAG,GAAGC,MAAM,CAACC,KAAK,CAACP,uBAAuB,CAACQ,MAAM,GAAGL,GAAG,CAACK,MAAM,GAAG,CAAC,CAAC;EACzEH,GAAG,CAACI,GAAG,CAACT,uBAAuB,EAAE,CAAC,CAAC;EACnCK,GAAG,CAACI,GAAG,CAACN,GAAG,EAAEH,uBAAuB,CAACQ,MAAM,CAAC;EAE5C,IAAIE,MAAM,GAAG,CAAC;EACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,GAAG,CAACG,MAAM,GAAG,CAAC,EAAE,EAAEG,CAAC,EAAE;IACrCD,MAAM,IAAIL,GAAG,CAACM,CAAC,CAAC;EACpB;EACAN,GAAG,CAACA,GAAG,CAACG,MAAM,GAAG,CAAC,CAAC,GAAGE,MAAM;EAC5B,IAAME,SAAS,GAAGb,IAAI,CAACc,MAAM,CAACR,GAAG,CAAC;EAElC,QAAAD,gBAAA,GAAOQ,SAAS,CAACE,KAAK,CAAC,SAAS,CAAC,cAAAV,gBAAA,uBAA1BA,gBAAA,CAA4BW,IAAI,CAAC,GAAG,CAAC;AAChD;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiBA,CAACC,WAAmB,EAAc;EAC/D,IAAMC,MAAM,GAAGnB,IAAI,CAACoB,MAAM,CAACF,WAAW,CAACG,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;EAEzD,IAAIV,MAAM,GAAG,CAAC;EACd,KAAK,IAAMW,CAAC,IAAIH,MAAM,EAAE;IACpBR,MAAM,IAAIW,CAAC;EACf;EACA,IAAIX,MAAM,KAAK,CAAC,EAAE;IACd,MAAM,IAAIY,KAAK,CAAC,kBAAkB,CAAC;EACvC;EAEA,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,uBAAuB,CAACQ,MAAM,EAAE,EAAEG,CAAC,EAAE;IACrD,IAAIO,MAAM,CAACP,CAAC,CAAC,KAAKX,uBAAuB,CAACW,CAAC,CAAC,EAAE;MAC1C,MAAM,IAAIW,KAAK,CAAC,kBAAkB,CAAC;IACvC;EACJ;EAEA,IAAIJ,MAAM,CAACV,MAAM,KAAKR,uBAAuB,CAACQ,MAAM,GAAGP,QAAQ,GAAG,CAAC,EAAE;IACjE,MAAM,IAAIqB,KAAK,CAAC,kBAAkB,CAAC;EACvC;EAEA,OAAOC,UAAU,CAACC,IAAI,CAACN,MAAM,CAACO,KAAK,CAACzB,uBAAuB,CAACQ,MAAM,EAAER,uBAAuB,CAACQ,MAAM,GAAGP,QAAQ,CAAC,CAAC;AACnH","ignoreList":[]}