{"version":3,"file":"discovery.js","names":["MetadataService","OidcClientSettingsStore","isValidatedIssuerMetadata","validateOIDCIssuerWellKnown","Method","timeoutSignal","discoverAndValidateOIDCIssuerWellKnown","_ref","_asyncToGenerator","issuer","_yield$metadataServic","issuerOpenIdConfigUrl","URL","issuerWellKnownResponse","fetch","method","Get","signal","issuerWellKnown","json","validatedIssuerConfig","settings","authority","redirect_uri","client_id","metadataService","metadata","getMetadata","signingKeys","getSigningKeys","undefined","_objectSpread","_x","apply","arguments"],"sources":["../../src/oidc/discovery.ts"],"sourcesContent":["/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { MetadataService, OidcClientSettingsStore } from \"oidc-client-ts\";\n\nimport { isValidatedIssuerMetadata, validateOIDCIssuerWellKnown } from \"./validate.ts\";\nimport { Method, timeoutSignal } from \"../http-api/index.ts\";\nimport { OidcClientConfig } from \"./index.ts\";\n\n/**\n * @experimental\n * Discover and validate delegated auth configuration\n * - delegated auth issuer openid-configuration is reachable\n * - delegated auth issuer openid-configuration is configured correctly for us\n * Fetches https://oidc-issuer.example.com/.well-known/openid-configuration and other files linked therein.\n * When successful, validated metadata is returned\n * @param issuer - the OIDC issuer as returned by the /auth_issuer API\n * @returns validated authentication metadata and optionally signing keys\n * @throws when delegated auth config is invalid or unreachable\n */\nexport const discoverAndValidateOIDCIssuerWellKnown = async (issuer: string): Promise<OidcClientConfig> => {\n    const issuerOpenIdConfigUrl = new URL(\".well-known/openid-configuration\", issuer);\n    const issuerWellKnownResponse = await fetch(issuerOpenIdConfigUrl, {\n        method: Method.Get,\n        signal: timeoutSignal(5000),\n    });\n    const issuerWellKnown = await issuerWellKnownResponse.json();\n    const validatedIssuerConfig = validateOIDCIssuerWellKnown(issuerWellKnown);\n\n    // create a temporary settings store, so we can use metadata service for discovery\n    const settings = new OidcClientSettingsStore({\n        authority: issuer,\n        redirect_uri: \"\", // Not known yet, this is here to make the type checker happy\n        client_id: \"\", // Not known yet, this is here to make the type checker happy\n    });\n    const metadataService = new MetadataService(settings);\n    const metadata = await metadataService.getMetadata();\n    const signingKeys = (await metadataService.getSigningKeys()) ?? undefined;\n\n    isValidatedIssuerMetadata(metadata);\n\n    return {\n        ...validatedIssuerConfig,\n        metadata,\n        signingKeys,\n    };\n};\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,eAAe,EAAEC,uBAAuB,QAAQ,gBAAgB;AAEzE,SAASC,yBAAyB,EAAEC,2BAA2B,QAAQ,eAAe;AACtF,SAASC,MAAM,EAAEC,aAAa,QAAQ,sBAAsB;AAG5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,sCAAsC;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,MAAc,EAAgC;IAAA,IAAAC,qBAAA;IACvG,IAAMC,qBAAqB,GAAG,IAAIC,GAAG,CAAC,kCAAkC,EAAEH,MAAM,CAAC;IACjF,IAAMI,uBAAuB,SAASC,KAAK,CAACH,qBAAqB,EAAE;MAC/DI,MAAM,EAAEX,MAAM,CAACY,GAAG;MAClBC,MAAM,EAAEZ,aAAa,CAAC,IAAI;IAC9B,CAAC,CAAC;IACF,IAAMa,eAAe,SAASL,uBAAuB,CAACM,IAAI,CAAC,CAAC;IAC5D,IAAMC,qBAAqB,GAAGjB,2BAA2B,CAACe,eAAe,CAAC;;IAE1E;IACA,IAAMG,QAAQ,GAAG,IAAIpB,uBAAuB,CAAC;MACzCqB,SAAS,EAAEb,MAAM;MACjBc,YAAY,EAAE,EAAE;MAAE;MAClBC,SAAS,EAAE,EAAE,CAAE;IACnB,CAAC,CAAC;IACF,IAAMC,eAAe,GAAG,IAAIzB,eAAe,CAACqB,QAAQ,CAAC;IACrD,IAAMK,QAAQ,SAASD,eAAe,CAACE,WAAW,CAAC,CAAC;IACpD,IAAMC,WAAW,IAAAlB,qBAAA,SAAUe,eAAe,CAACI,cAAc,CAAC,CAAC,cAAAnB,qBAAA,cAAAA,qBAAA,GAAKoB,SAAS;IAEzE5B,yBAAyB,CAACwB,QAAQ,CAAC;IAEnC,OAAAK,aAAA,CAAAA,aAAA,KACOX,qBAAqB;MACxBM,QAAQ;MACRE;IAAW;EAEnB,CAAC;EAAA,gBA1BYtB,sCAAsCA,CAAA0B,EAAA;IAAA,OAAAzB,IAAA,CAAA0B,KAAA,OAAAC,SAAA;EAAA;AAAA,GA0BlD","ignoreList":[]}